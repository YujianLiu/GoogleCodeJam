{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 45. Jump Game II\
\

\f1 \'b5\'da\'d2\'bb\'d1\'db\'bf\'b4\'b5\'bd\'c5\'d0\'b6\'cf\'d3\'a6\'b5\'b1\'ca\'c7\'d2\'bb\'b8\'f6\'b6\'af\'cc\'ac\'b9\'e6\'bb\'ae\'ce\'ca\'cc\'e2\'a3\'ac\'c3\'bf\'d2\'bb\'b2\'bd\'b5\'c4\'bd\'e1\'b9\'fb\'d2\'c0\'c0\'b5\'d3\'da\'cf\'c2\'d2\'bb\'b2\'bd\'b5\'c4\'bd\'e1\'b9\'fb\'a1\'a3\'b8\'f9\'be\'dd\'b5\'b1\'c7\'b0index\'b5\'c4\'ca\'fd\'d6\'b5x\'c0\'b4\'d2\'c0\'b4\'ce\'b1\'e9\'c0\'fa\'ba\'f3\'d0\'f80-x\'b8\'f6element\'a1\'a3\'d6\'b1\'d6\'c1\'b5\'bd\'b4\'ef\'ca\'fd\'d7\'e9\'b5\'c4\'c4\'a9\'ce\'b2\'a1\'a3\'d3\'c3\'d2\'bb\'b8\'f6\'ca\'fd\'d7\'e9\'c0\'b4\'b4\'e6\'b4\'a2\'b5\'bd\'b8\'c3index\'b5\'c4\'d7\'ee\'d0\'a1\'b2\'bd\'ca\'fd\'a1\'a3\'b4\'fa\'c2\'eb\'c8\'e7\'cf\'c2\'a3\'ba\
\
int Size_Of_Nums = nums.size();\
vector<int> Dp(Size_Of_Nums, INT_MAX);\
Dp[0] = 0;\
\
for(int index = 0; index < Size_Of_Nums; index++)\{\
	for(int Search_Index = 1; Search_Index + index < Size_Of_Nums and Search_Index <= nums[index] ; Search_Index++)\{\
	Dp[Search_Index + index] = min(Dp[Search_Index + index] , Dp[index] + 1);\
	if(Search_Index + index == Size_Of_Nums - 1) return Dp[Search_Index + index];\
\}\
\}\
\
return Dp[0];\
\'be\'ad\'b9\'fd\'b2\'e2\'ca\'d4\'a3\'ac\'d5\'e2\'d6\'d6\'b7\'bd\'b7\'a8\'bb\'e1\'b5\'bc\'d6\'c2TLE\'a1\'a3\'d0\'e8\'d2\'aa\'d1\'b0\'d5\'d2\'b5\'bd\'b8\'fc\'d3\'d0\'d0\'a7\'b5\'c4\'b7\'bd\'b7\'a8\'a1\'a3\'be\'ad\'b9\'fd\'b9\'db\'b2\'ec\'b7\'a2\'cf\'d6\'a3\'ac\'c8\'e7\'b9\'fb\'c3\'bf\'b4\'ce\'b6\'bc\'d1\'a1\'d4\'f1\'d7\'df\'d7\'ee\'d4\'b6\'b5\'c4\'c2\'b7\'be\'b6\'a3\'ac\'c4\'c7\'c3\'b4\'b5\'bd\'b4\'ef\'ca\'fd\'d7\'e9\'ce\'b2\'b6\'cb\'cb\'f9\'d0\'e8\'d2\'aa\'b5\'c4\'b2\'bd\'ca\'fd\'d3\'a6\'b8\'c3\'be\'cd\'ca\'c7\'d7\'ee\'c9\'d9\'b5\'c4\'a3\'ac\'bb\'f2\'d5\'df\'cb\'b5\'d4\'da\'cf\'e0\'cd\'ac\'b5\'c4\'b2\'bd\'ca\'fd\'cf\'c2\'c3\'bf\'b4\'ce\'b6\'bc\'d1\'a1\'d4\'f1\'d7\'df\'d7\'ee\'d4\'b6\'b5\'c4\'c2\'b7\'a3\'ac\'c4\'c7\'c3\'b4\'d2\'bb\'b6\'a8\'bb\'e1\'cf\'c8\'b5\'bd\'b4\'ef\'a1\'a3\'b6\'f8\'c7\'d2\'d2\'bb\'b5\'a9\'b5\'bd\'b4\'ef\'ce\'b2\'b6\'cb\'a3\'ac\'be\'cd\'bf\'c9\'d2\'d4\'cc\'f8\'b3\'f6\'cb\'e3\'b7\'a8\'a3\'ac\'d2\'f2\'ce\'aa\'d7\'ee\'d0\'a1\'b2\'bd\'ca\'fd\'d2\'d1\'b1\'bb\'bc\'c7\'c2\'bc\'a1\'a3\'d2\'f2\'b4\'cb\'a3\'ac\'d0\'de\'b8\'c4\'cb\'e3\'b7\'a8\'a3\'ba\
\
int Size_Of_Nums = nums.size();\
int MaxReach = 0, index = 0, step = 0;\
\
\
while(MaxReach < Size_Of_Nums - 1)\{\
	MaxReach = max(MaxReach, nums[index] + index);\
	step++;\
	int forcast = 0; \
	for(int i = index + 1; i <= MaxReach; i++)\{\
		if(i + nums[i] > forcast)\{\
			forcast = i + nums[i];\
			index = i;\
		\}\
	\}\
\}\
\
return step;\

\f0 \

\f1 \'d5\'e2\'d6\'d6\'d0\'b4\'b7\'a8\'ca\'c7\'d2\'f2\'ce\'aa\'d2\'d1\'be\'ad\'b1\'a3\'d6\'a4\'c1\'cb\'bf\'c9\'d2\'d4\'b5\'bd\'b4\'ef\'d6\'d5\'b5\'e3\'a1\'a3\'b7\'f1\'d4\'f2\'d3\'a6\'b5\'b1\'bd\'f8\'d0\'d0\'b7\'c0\'d6\'b9\'cb\'c0\'d1\'ad\'bb\'b7\'b5\'c4\'b4\'a6\'c0\'ed\'a1\'a3
\f0 \
\
To be continued..\
\
\
}
{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red166\green226\blue46;\red22\green22\blue19;\red233\green226\blue222;
\red249\green38\blue114;\red174\green128\blue255;\red253\green151\blue31;}
{\*\expandedcolortbl;;\csgenericrgb\c65260\c88806\c18158;\csgenericrgb\c8544\c8755\c7490;\csgenericrgb\c91194\c88805\c87251;
\csgenericrgb\c97815\c14858\c44525;\csgenericrgb\c68062\c50359\c99997;\csgenericrgb\c99341\c59175\c12087;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 1. Two Sum\
\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3\'b1\'a9\'c1\'a6\'bd\'e2\'b7\'a8\'a3\'ac\'bc\'b4\'cf\'c8\'c8\'b7\'b6\'a8\'d2\'bb\'b8\'f6\'ca\'fd\'b5\'c4\'ce\'bb\'d6\'c3\'c8\'bb\'ba\'f3\'d4\'d9\'cb\'d1\'cb\'f7\'ba\'f3\'d0\'f8\'b5\'c4\'d4\'aa\'cb\'d8\'a3\'ac\'c8\'e7\'b9\'fb\'c2\'fa\'d7\'e3\'ba\'cd\'ce\'aa
\f1 target
\f0 \'c4\'c7\'c3\'b4\'be\'cd\'c4\'dc\'b9\'bb\'c8\'b7\'b6\'a8\'c1\'bd\'b8\'f6
\f1 index
\f0 \'a1\'a3\'d2\'bb\'d6\'d6\'b8\'c4\'bd\'f8\'b5\'c4\'b7\'bd\'b7\'a8\'ca\'c7\'c0\'fb\'d3\'c3\'b9\'fe\'cf\'a3\'b1\'ed\'a3\'ac\'bd\'ab\'a3\'a8
\f1 difference
\f0 \'a3\'ac
\f1 index
\f0 \'a3\'a9\'b4\'e6\'b4\'a2\'c6\'f0\'c0\'b4\'a3\'ac\'c3\'bf\'b4\'ce\'b1\'e9\'c0\'fa\'b5\'bd\'d0\'c2\'b5\'c4\'d4\'aa\'cb\'d8\'be\'cd\'c4\'dc\'b9\'bb\'d6\'b1\'bd\'d3\'b2\'e9\'d5\'d2\'b5\'bd\'b1\'ed\'d6\'d0\'ca\'c7\'b7\'f1\'d3\'d0\'cf\'e0\'d3\'a6\'b5\'c4difference\'a3\'ac\'c8\'e7\'b9\'fb\'b2\'e9\'d5\'d2\'b5\'bd\'d4\'f2\'bf\'c9\'d6\'b1\'bd\'d3\'b7\'b5\'bb\'d8index\'a3\'ac\'b7\'f1\'d4\'f2\'be\'cd\'bd\'ab\'d0\'c2\'b5\'c4\'d4\'aa\'cb\'d8\'b2\'e5\'c8\'eb\'b1\'ed\'d6\'d0\'a1\'a3\'b4\'fa\'c2\'eb\'c8\'e7\'cf\'c2\'a3\'ba\
\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f2\fs28 \cf2 \cb3 vector\cf4 <\cf5 int\cf4 > twoSum(\cf2 vector\cf4 <\cf5 int\cf4 >& nums, \cf5 int\cf4  target)\{
\f3\fs24 \cf0 \

\f2\fs28 \cf4     \cf2 unordered_map\cf4 <\cf5 int\cf4 , \cf5 int\cf4 > diff_idx;
\f3\fs24 \cf0 \

\f2\fs28 \cf4     \cf2 vector\cf4 <\cf5 int\cf4 > result;
\f3\fs24 \cf0 \

\f2\fs28 \cf4     \cf5 for\cf4  (\cf5 int\cf4  index = \cf6 0\cf4 ; index < nums.\cf7 size\cf4 (); index++) \{
\f3\fs24 \cf0 \

\f2\fs28 \cf4         \cf5 if\cf4  (diff_idx.\cf7 find\cf4 (nums[\cf7 index\cf4 ]) == diff_idx.\cf7 end\cf4 ()) \{
\f3\fs24 \cf0 \

\f2\fs28 \cf4             diff_idx[\cf7 target\cf4  - \cf7 nums\cf4 [\cf7 index\cf4 ]] = index;
\f3\fs24 \cf0 \

\f2\fs28 \cf4         \}
\f3\fs24 \cf0 \

\f2\fs28 \cf4         \cf5 else
\f3\fs24 \cf0 \

\f2\fs28 \cf4         \{
\f3\fs24 \cf0 \

\f2\fs28 \cf4             result.\cf7 push_back\cf4 (diff_idx[\cf7 nums\cf4 [\cf7 index\cf4 ]]);
\f3\fs24 \cf0 \

\f2\fs28 \cf4             result.\cf7 push_back\cf4 (index);
\f3\fs24 \cf0 \

\f2\fs28 \cf4         \}
\f3\fs24 \cf0 \

\f2\fs28 \cf4     \}
\f3\fs24 \cf0 \

\f2\fs28 \cf4     \cf5 return\cf4  result;\

\f0 \}
\f3\fs24 \cf0 \

\f0\fs36 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
}
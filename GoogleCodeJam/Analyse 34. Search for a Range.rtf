{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 34. Search for a Range\
\

\f1 \'d3\'c9\'d3\'da\'cb\'e3\'b7\'a8\'cf\'de\'d6\'c6\'c1\'cb\'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8\'ce\'aa
\f0 O
\f1 (logn)\'a3\'ac\'c7\'d2\'b8\'c3\'ca\'fd\'d7\'e9\'ce\'aa\'c9\'fd\'d0\'f2\'c5\'c5\'c1\'d0\'a3\'ac\'cb\'f9\'d2\'d4\'d7\'ee\'cf\'c8\'cf\'eb\'b5\'bd\'b5\'c4\'be\'cd\'ca\'c7\'d3\'c3\'b6\'fe\'b7\'d6\'b2\'e9\'d5\'d2\'b5\'c4\'b0\'ec\'b7\'a8\'a1\'a3\'b6\'fe\'b7\'d6\'b2\'e9\'d5\'d2\'cd\'a8\'b3\'a3\'d5\'eb\'b6\'d4\'c5\'c5\'ba\'c3\'d0\'f2\'b5\'c4\'ca\'fd\'d7\'e9\'a3\'ac\'c6\'bd\'be\'f9\'ca\'b1\'bc\'e4\'ce\'aaO(logn)\'a3\'ac\'cb\'e3\'b7\'a8\'b5\'c4\'b9\'d8\'bc\'fc\'d4\'da\'d3\'da\'b1\'df\'bd\'e7\'cc\'f5\'bc\'fe\'b5\'c4\'c5\'d0\'b6\'a8\'a3\'a8inclusive\'a3\'acexclusive\'a3\'a9\'d2\'d4\'bc\'b0high\'a3\'acmid\'a3\'aclow\'c8\'fd\'b8\'f6\'d6\'b5\'c8\'e7\'ba\'ce\'b1\'e4\'bb\'af\'a1\'a3\'d3\'c9\'d3\'da\'cb\'f9\'c7\'f3\'b5\'c4\'ca\'c7\'d2\'bb\'b8\'f6\'d6\'b5\'b5\'c4\'b7\'b6\'ce\'a7\'a3\'ac\'c4\'c7\'c3\'b4\'b7\'b6\'ce\'a7\'b5\'c4\'bd\'e7\'cf\'de\'d3\'a6\'b8\'c3\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'b8\'c4\'b1\'e4\'d2\'bb\'d0\'a9\'c5\'d0\'b6\'cf\'cc\'f5\'bc\'fe\'c0\'b4\'b5\'c3\'b5\'bd\'a1\'a3\'b6\'fe\'b7\'d6\'b2\'e9\'d5\'d2\'bb\'f9\'b1\'be\'b0\'e6\'ce\'aa\'a3\'ba\
\
int high = nums.size() - 1;\
int low = 0;\
\
while(high > low)\{\
	int mid = low + (high - low) / 2; //\'b7\'c0\'d6\'b9\'d2\'e7\'b3\'f6\'a3\'ac\'b5\'ab\'ca\'c7\'c8\'e7\'b9\'fb\'b9\'fd\'b4\'f3\'d2\'b2\'c3\'bb\'ca\'b2\'c3\'b4\'b0\'ec\'b7\'a8\'a3\'ba\'a3\'a9\
	if(nums[mid] < target)\{\
\
	low = mid + 1;\
\
	\}else if(nums[mid] > target)\{\
\
	high = mid - 1;\
\
	\}\
	else return mid;\
\}\
\
\'b5\'ab\'ca\'c7\'cf\'d6\'d4\'da\'ce\'d2\'c3\'c7\'d2\'aa\'d5\'d2\'b5\'c4\'b2\'a2\'b2\'bb\'ca\'c7\'d2\'bb\'b8\'f6\'d6\'b5\'a3\'ac\'b6\'f8\'ca\'c7\'d2\'bb\'b8\'f6\'b1\'df\'bd\'e7\'a3\'ac\'bb\'f2\'d5\'df\'b8\'fc\'d6\'b1\'b0\'d7\'d2\'bb\'b5\'e3\'a3\'ba\'d4\'bd\'b9\'fd\'b1\'df\'bd\'e7\'be\'cd\'b2\'bb\'ca\'c7\'bd\'e7\'d6\'d0\'b5\'c4\'d6\'b5\'c1\'cb\'a1\'a3\'d2\'f2\'b4\'cb\'a3\'ac\'d2\'bb\'b6\'a8\'d2\'aa\'cc\'bd\'b2\'e2\'b5\'bd\'b1\'df\'bd\'e7\'cd\'e2\'a3\'ac\'d4\'d9\'d2\'bb\'b2\'bd\'b2\'bd\'bb\'d8\'b5\'bd\'b1\'df\'bd\'e7\'c4\'da\'a1\'a3\'b6\'f8\'c7\'d2\'bf\'c9\'d2\'d4\'b7\'d6\'b1\'f0\'d5\'eb\'b6\'d4\'c9\'cf\'bd\'e7\'ba\'cd\'cf\'c2\'bd\'e7\'c0\'b4\'bd\'f8\'d0\'d0\'bc\'c6\'cb\'e3\'a1\'a3\'b4\'fa\'c2\'eb\'c8\'e7\'cf\'c2\'a3\'ba\
\'c7\'f3\'cf\'c2\'bd\'e7\'a3\'ba\
int high = nums.size() - 1;\
int low = 0;\
\
while(high > low)\{\
	int mid = low + (high - low) / 2; \
	if(nums[mid] < target)\{\
	\
	low = mid + 1;//\'d6\'bb\'b6\'d4\'d2\'bb\'b8\'f6\'d6\'b8\'d5\'eb\'bd\'f8\'d0\'d0\'d4\'f6\'bc\'f5\
\
	\}else\{\
\
	high = mid;\
\
	\}\
\}\
if(nums[low] == target) result[0] = low;\
\
\'c7\'f3\'c9\'cf\'bd\'e7\'a3\'ba\
int high = nums.size() - 1;\
int low = 0;\
\
while(high > low)\{\
	int mid = low + (high - low) / 2; \
	if(nums[mid] > target)\{\
	\
	high = mid;\
\
	\}else\{\
\
	low = mid + 1;//\'d6\'bb\'b6\'d4\'d2\'bb\'b8\'f6\'d6\'b8\'d5\'eb\'bd\'f8\'d0\'d0\'d4\'f6\'bc\'f5\
\
	\}\
\}\
if(nums[high] == target) result[1] = high;//\'c9\'cf\'bd\'e7\'bc\'b4\'ca\'c7\'ca\'fd\'d7\'e9\'b5\'c4\'c9\'cf\'bd\'e7\
else if(high > 0 and nums[high - 1] == target) result[1] = high - 1;// \'c9\'cf\'bd\'e7\'ce\'aa\'c1\'ac\'d0\'f8target\'b5\'c4\'cf\'c2\'d2\'bb\'d4\'aa\'cb\'d8\
\'d7\'ee\'ba\'f3\'d7\'e9\'ba\'cf\'d4\'da\'d2\'bb\'c6\'f0\'a3\'ba\
\
vector<int> result\{-1, -1\};\
int high = nums.size() - 1;\
int low = 0;\
if(nums.empty())\
return result;\
\
while(high > low)\{\
	int mid = low + (high - low) / 2; \
	if(nums[mid] < target)\{\
	\
	low = mid + 1;\
\
	\}else\{\
\
	high = mid;\
\
	\}\
\}\
if(nums[low] == target) result[0] = low;\
high = nums.size() - 1;\
low = 0;\
while(high > low)\{\
	int mid = low + (high - low + 1) / 2; \
	if(nums[mid] > target)\{\
	\
	high = mid - 1;\
\
	\}else\{\
\
	low = mid;\
\
	\}\
\}\
if(nums[high] == target) result[1] = high;\
else if(high > 0 and nums[high - 1] == target) result[1] = high - 1;\
\
return result;\
\'d4\'da\'c7\'f3\'c9\'cf\'bd\'e7\'ca\'b1\'b3\'f6\'c1\'cb\'d2\'bb\'b5\'e3\'ce\'ca\'cc\'e2\'a3\'ac\'b5\'b1\'ca\'fd\'d7\'e9\'d6\'d0\'d6\'bb\'d3\'d0\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'bb\'f2\'d5\'df\'ce\'aa\'bf\'d5\'ca\'b1\'a3\'ac\'c8\'e7\'ba\'ce\'b1\'dc\'c3\'e2\'d4\'bd\'bd\'e7\'b5\'c4\'ce\'ca\'cc\'e2\'a1\'a3\'ca\'d7\'cf\'c8\'cc\'d6\'c2\'db\'bf\'d5\'ca\'fd\'d7\'e9\'a3\'ac\'d4\'da\'b2\'bb\'b8\'c4\'b1\'e4\'c1\'bd\'b8\'f6\'d1\'ad\'bb\'b7\'cc\'f5\'bc\'fe\'b5\'c4\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac\'b2\'bb\'bb\'e1\'d4\'ec\'b3\'c9\'b6\'d4\'ca\'fd\'d7\'e9\'d4\'aa\'cb\'d8\'b5\'c4\'b7\'c3\'ce\'ca\'a3\'ac\'d2\'f2\'b4\'cb\'c5\'d0\'b6\'cf\'ca\'fd\'d7\'e9\'ca\'c7\'b7\'f1\'ce\'aa\'bf\'d5\'bf\'c9\'d2\'d4\'b7\'c5\'d6\'c3\'d4\'dareturn\'c7\'b0\'b5\'c4\'c8\'ce\'d2\'e2\'ce\'bb\'d6\'c3\'a1\'a3\'bb\'f2\'d5\'df\'b8\'f9\'be\'dd\'b3\'cc\'d0\'f2\'bd\'e1\'b9\'b9\'a3\'ac\'d2\'b2\'d0\'ed\'bf\'c9\'d2\'d4\'bd\'ab\'b8\'c3\'d3\'ef\'be\'e4\'ca\'a1\'c2\'d4\'a1\'a3\'b9\'d8\'bc\'fc\'b5\'c4\'ce\'ca\'cc\'e2\'d4\'da\'d3\'da\'c8\'e7\'ba\'ce\'d4\'da\'c7\'f3\'c9\'cf\'bd\'e7\'ca\'b1\'ca\'b5\'cf\'d6high == low\'d5\'e2\'d2\'bb\'b2\'bd\'a3\'ac\'d3\'c3floor\'ba\'af\'ca\'fd\'bf\'c9\'d2\'d4\'ca\'b5\'cf\'d6\'a3\'ac\'bb\'f2\'d5\'df(l+r+1) /2 \'d5\'e2\'d1\'f9\'b5\'c4\'b4\'a6\'c0\'ed\'d2\'b2\'bf\'c9\'d2\'d4\'a1\'a3\'c7\'f3\'cf\'c2\'bd\'e7\'ca\'b1\'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aaceil \'c7\'f3\'c9\'cf\'bd\'e7\'ca\'b1\'d0\'e8\'d2\'aafloor\'a1\'a3\'b8\'c4\'d0\'b4\'b3\'cc\'d0\'f2\'a3\'ba\
\
vector<int> result\{-1, -1\};\
int high = nums.size() - 1;\
int low = 0;\
if(nums.empty())\
return result;\
\
while(high > low)\{\
	int mid = low + (high - low) / 2; \
	if(nums[mid] < target)\{\
	\
	low = mid + 1;\
\
	\}else\{\
\
	high = mid;\
\
	\}\
\}\
if(nums[low] == target) result[0] = low;\
high = nums.size() - 1;\
low = 0;\
while(high > low)\{\
	int mid = low + (high - low + 1) / 2; \
	if(nums[mid] > target)\{\
	\
	high = mid - 1;\
\
	\}else\{\
\
	low = mid;\
\
	\}\
\}\
if(nums[high] == target) result[1] = high;\
\
return result;\
\'b5\'b1\'c8\'bb\'a3\'ac\'d5\'e2\'b2\'a2\'b2\'bb\'ca\'c7\'d7\'ee\'d3\'c5\'bd\'e2\'b7\'a8\'a1\'a3To be continued..\
\
}